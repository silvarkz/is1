from Cryptodome.Cipher import DES

def perform_des_round(input_bytes, key):
    cipher = DES.new(key, DES.MODE_ECB)
    return cipher.decrypt(input_bytes)

def perform_des_rounde(input_bytes, key):
    cipher = DES.new(key, DES.MODE_ECB)
    return cipher.encrypt(input_bytes)
    
def main():
    key = input("Enter the 8-byte key: ").encode('utf-8')
    cipher = DES.new(key, DES.MODE_ECB)
    
    plaintext = input("Enter the plaintext: ").encode('utf-8')
    block_size = 8
    padded_length = (len(plaintext) + block_size - 1) // block_size * block_size
    padded_plaintext = plaintext.ljust(padded_length, b'\x00')

    ciphertext = cipher.encrypt(padded_plaintext)
    encoded_ciphertext = ciphertext.hex()
    print("Encrypted Message (HEX):", encoded_ciphertext)

    print("\nIntermediate Results (16 Rounds - Encryption):")
    input_bytes = padded_plaintext
    for i in range(1, 17):
        input_bytes = perform_des_rounde(input_bytes, key)
        encoded_input = input_bytes.hex()
        print(f"Round {i}: {encoded_input}")

    cipher = DES.new(key, DES.MODE_ECB)
    decrypted_bytes = cipher.decrypt(ciphertext)
    decrypted_message = decrypted_bytes.rstrip(b'\x00').decode('utf-8')
    print("\nDecrypted Message:", decrypted_message)

    print("\nIntermediate Results (16 Rounds - Decryption):")
    output_bytes = input_bytes
    for i in range(16, 0, -1):
        output_bytes = perform_des_round(output_bytes, key)
        encoded_output = output_bytes.hex()
        print(f"Round {i}: {encoded_output}")

if __name__ == '__main__':
    main()
